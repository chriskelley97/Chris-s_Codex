#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// The number of children for each node
// We will construct a N-ary tree and make it
// a Trie
// Since we have 26 english letters, we need
// 26 children per node
#define N 26

typedef struct TrieNode TrieNode;

struct TrieNode {
    // The Trie Node Structure
    // Each node has N children, starting from the root
    // and a flag to check if it's a leaf node
    char data; // Storing for printing purposes only
    int val;
    TrieNode* children[N];
    int is_leaf;
    bool isEndOfWord;
};

TrieNode* make_trienode(char data, bool isEndOfWord, int val) {
    // Allocate memory for a TrieNode
    TrieNode* node = (TrieNode*) calloc (1, sizeof(TrieNode));
    for (int i=0; i<N; i++)
        node->children[i] = NULL;
    node->is_leaf = 0;
    node->data = data;
    node->isEndOfWord = isEndOfWord;
    node->val = val;
    return node;
}

void free_trienode(TrieNode* node) {
    // Free the trienode sequence
    for(int i=0; i<N; i++) {
        if (node->children[i] != NULL) {
            free_trienode(node->children[i]);
        }
        else {
            continue;
        }
    }
    free(node);
}

TrieNode* insert_trie(TrieNode* root, char* word, int val) {
    // Inserts the word onto the Trie
    // ASSUMPTION: The word only has lower case characters
    TrieNode* temp = root;

    if(root == NULL) {
        root = make_trienode('1', false, 0);
        temp = root;
    }

    for (int i = 0; word[i + 1] != '\0'; i++) {
        // Get the relative position in the alphabet list
        int idx = (int) word[i] - 'A';
        if (temp->children[idx] == NULL) {
            // If the corresponding child doesn't exist,
            // simply create that child!
            temp->children[idx] = make_trienode(word[i], false, 0);
        }
        // Go down a level, to the child referenced by idx
        // since we have a prefix match
        temp = temp->children[idx];
    }

    // Now, we have reached the last character of the word
    // We need to create a leaf node for this
    int idx = (int) word[strlen(word) - 1] - 'A';
    if (temp->children[idx] == NULL) {
        // If the corresponding child doesn't exist,
        // simply create that child!
        temp->children[idx] = make_trienode(word[strlen(word) - 1], true, val);
    }
    temp->children[idx]->is_leaf = 1;
    temp = temp->children[idx];

    // At the end of the word, mark this node as the leaf node
    temp->is_leaf = 1;
    return root;
}

int countMangoesWord(TrieNode* root, int count)
{
    // Searches for word in the Trie
    if(root == NULL)
        return 0;
    TrieNode* temp = root;

    for(int i=0; i < 26; i++)
    {
        if (temp->children[i] != NULL)
        {
            if(temp->children[i]->isEndOfWord)
            {
                count += temp->children[i]->val;
            }
            count = countMangoesWord(temp->children[i], count);
        }
    }


    return count;
}


void replace(TrieNode* root, char* word1, char* word2)
{
    // Searches for word in the Trie
    if(root == NULL)
        return;
    TrieNode* temp = root;

    int val = 0;

    for(int i=0; word1[i + 1] != '\0'; i++)
    {
        int idx = (int) word1[i] - 'A';
        if (temp->children[idx] != NULL)
        {
            temp = temp->children[idx];
        }
    }

    int idx = (int) word1[strlen(word1) - 1] - 'A';
    if (temp->children[idx] != NULL)
    {
        val = temp->children[idx]->val;
        temp->children[idx]->isEndOfWord = false;
        temp->children[idx]->val = 0;
    }

    // creates a new node with the new word
    insert_trie(root, word2, val);
}



int main() {
    // Driver program for the Trie Data Structure Operations
    int option; //case
    int numOfOrangutans;
    int numOfEvents;
    int numOfMangos;
    char *name;
    char *name2;
    char input[100];


    struct TrieNode *nodePtr;


    scanf("%d %d", &numOfOrangutans, &numOfEvents);

    for(int i = 0; i < numOfEvents; i++){
        fgets(input, 100, stdin);
        option = atoi(strtok(input, " "));
        switch(option) {
            case 1:
                name = strtok(NULL, " ");
                numOfMangos = atoi(strtok(NULL, " "));
                nodePtr = insert_trie(nodePtr, name, numOfMangos);
                break;
            case 2:
                name = strtok(NULL, " ");
                name2 = strtok(NULL, " ");
                replace(nodePtr, name, name2);
                break;
            case 3:
                name = strtok(NULL, " ");
                TrieNode *temp = nodePtr;
                int position = name[0] - 'A';
                int count = 0;
                if (temp->children[position] == NULL)
                    printf("%d", count);
                else{
                    temp = temp->children[position];
                    count = countMangoesWord(temp, count);
                    printf("%d", count);
                }
                // TODO remove the new line from stdin
                break;
        }
    }



    return 0;
}
